<?php declare(strict_types=1);

namespace Lowel\Workproject\Tests\App\Controllers;

use Lowel\Workproject\App\Controllers\AbstractController;
use PHPUnit\Framework\TestCase;

class AbstractControllerTest extends TestCase
{
    const TEMPLATE_HTML_NAME = 'index1';
    const TEMPLATE_PHP_NAME = 'index2';
    const DIR = 'test';
    const EXPECT_CONTENT = '<h1>Hello world</h1>';

    /**
     * Creating target template files
     * @return void
     */
    protected function setUp(): void
    {
        $views_path = $_ENV['VIEWS_PATH'];
        $html_name = self::TEMPLATE_HTML_NAME . '.html';
        $php_name = self::TEMPLATE_PHP_NAME . '.php';

        // create HTML and PHP template file
        file_put_contents($views_path . $html_name, self::EXPECT_CONTENT);
        file_put_contents($views_path . $php_name, '<?php echo $content;?>');

        // now we create flooder and make the same files into it
        $new_views_path = $views_path . self::DIR . '/';

        mkdir($new_views_path);
        file_put_contents($new_views_path . $html_name, self::EXPECT_CONTENT);
        file_put_contents($new_views_path . $php_name, '<?php echo $content;?>');

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * Delete created files in setUp methods
     * @return void
     */
    protected function tearDown(): void
    {
        $views_path = $_ENV['VIEWS_PATH'];
        $html_name = self::TEMPLATE_HTML_NAME . '.html';
        $php_name = self::TEMPLATE_PHP_NAME . '.php';

        unlink($views_path . $html_name);
        unlink($views_path . $php_name);
        unlink($views_path . self::DIR . '/' . $html_name);
        unlink($views_path . self::DIR . '/' . $php_name);
        rmdir($views_path . self::DIR);


        parent::tearDown();

    }


    function testRenderManual(): void
    {
        $this->assertEquals(
            self::EXPECT_CONTENT,
            AbstractController::render('index1')
        );
        $this->assertEquals(
            self::EXPECT_CONTENT,
            AbstractController::render('index2', ['content' => self::EXPECT_CONTENT])
        );
    }

    function testRenderWithSubDir(): void
    {
        $this->assertEquals(
            self::EXPECT_CONTENT,
            AbstractController::render('test.index1')
        );
        $this->assertEquals(
            self::EXPECT_CONTENT,
            AbstractController::render('test.index2', ['content' => self::EXPECT_CONTENT])
        );
    }
}
